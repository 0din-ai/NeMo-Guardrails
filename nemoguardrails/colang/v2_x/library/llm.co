# meta: exclude from llm
import utils

@loop("llm_response_polling")
flow polling llm request response $interval=1.0
  match StartGenerateUserIntentAction() as $event_ref
    or StartGenerateFlowContinuationAction() as $event_ref
    or StartGenerateFlowFromNameAction() as $event_ref
    or StartGenerateValueAction() as $event_ref
    or StartGenerateFlowFromInstructionsAction() as $event_ref
  start repeating timer "llm_response_polling" $interval as $polling_timer
  start bot posture "Thinking, idle" as $posture
  match $event_ref.action.Finished()
  send $polling_timer.Stop()
  send $posture.Stop()

@loop(id="action_log")
flow log user action
  """Record user actions to the interaction log."""
  match FlowFinished(flow_id=regex("^user said")) as $event
  $info = flows_info($event.flow.uid)
  $count = 1
  while $count < len($info.flow_hierarchy)
    $intent_flow_uid = $info.flow_hierarchy[$count]
    $intent_flow_name = find_all("\((user (?!said).*)\)", $intent_flow_uid)
    if $intent_flow_name
      send UserActionLog(flow_id=$event.flow_id, parameter=$event.flow.transcript, intent_flow_id=$intent_flow_name[0])
      break
    $count = $count + 1

@loop(id="intent_log")
flow log user intent
  """Record user intents to the interaction log."""
  match FlowFinished(flow_id=regex("^user (?!said)")) as $event
  send UserIntentLog(flow_id=$event.flow_id, parameter=None)


@loop(id="action_log")
flow log bot action
  """Record bot actions to the interaction log."""
  match FlowFinished(flow_id=regex("^bot say")) as $event
  $info = flows_info($event.flow.uid)
  $count = 1
  while $count < len($info.flow_hierarchy)
    $intent_flow_uid = $info.flow_hierarchy[$count]
    $intent_flow_name = find_all("\((bot (?!say).*)\)", $intent_flow_uid)
    if $intent_flow_name
      send BotActionLog(flow_id=$event.flow_id, parameter=$event.text, intent_flow_id=$intent_flow_name[0])
      break
    $count = $count + 1


@loop(id="intent_log")
flow log bot intent
  """Record bot intents to the interaction log."""
  match FlowFinished(flow_id=regex("^bot (?!say)")) as $event
  send BotIntentLog(flow_id=$event.flow_id, parameter=None)


flow unhandled user utterance -> $event
  match UnhandledEvent(event="UtteranceUserActionFinished", loop_ids={$self.loop_id}) as $event


flow continuation on undefined user utterance
  """Continue the interaction on a user utterance that was not defined."""
  activate tracking bot talking state
  global $bot_talking_state
  
  await unhandled user utterance as $ref
  if $bot_talking_state != True
    # Don't invoke llm while bot is talking
    $action = 'user said "{$ref.event.final_transcript}"'
    $intent = await GenerateUserIntentAction(user_action=$action, max_example_flows=20)

  # We need to log the user action
  send UserActionLog(flow_id="user said", parameter=$ref.event.final_transcript, intent_flow_id=$intent)
  # We need to add the generated user intent to the intent log
  send UserIntentLog(flow_id=$intent, parameter=None)
  # Generate the 'user intent' by sending out the FinishFlow event
  send FinishFlow(flow_id=$intent)


flow unhandled user intent -> $intent
  match UnhandledEvent(event="FinishFlow", flow_id=regex("^user "), loop_ids={$self.loop_id}) as $event
  $intent = $event.arguments.flow_id


flow continuation on undefined user intent
  """Generates next bot intent for unhandled user intents."""
  await unhandled user intent

  $flow_info = await GenerateFlowContinuationAction(temperature=0.1)
  $exists = await CheckValidFlowExistsAction(flow_id=$flow_info.name)

  if $exists == False
    $flows = await AddFlowsAction(config=$flow_info.body)
    if len($flows) == 0
      print "Parsing failed for LLM generated flow!"
    else
      await await_flow_by_name $flow_info.name
      await RemoveFlowsAction(flow_ids=[$flow_info.name])


flow continuation on undefined flow
  """We want to start an undefined flow."""
  match UnhandledEvent(event="StartFlow") as $event

  # We explicitly set this here so this can start again recursively if needed.
  start_new_flow_instance:

  # Generate a flow and add it to the runtime
  $flow_source = await GenerateFlowFromNameAction(name=$event.flow_id)
  await AddFlowsAction(config=$flow_source)

  # Start and wait for it to finish
  await await_flow_by_name $event.flow_id
  await RemoveFlowsAction(flow_ids=[$event.flow_id])


flow logging of bot user interaction
  activate log user action
  activate log user intent
  activate log bot action
  activate log bot intent

flow llm continuation
  activate logging of bot user interaction
  activate continuation on undefined user utterance
  activate continuation on undefined user intent
  activate continuation on undefined flow
