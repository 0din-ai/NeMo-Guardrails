# Shows the interaction pattern matching over multiple levels of flows

flow a
  start bot say "Flow a"
  await user said something
  start bot say "Ok"
  start c
  start e
  match c

flow b
  start bot say "Flow b"
  await user said "Hi"
  start bot say "Ok"
  start d
  start f
  match d

flow c
  start bot say "Now"
  start bot say "1"

flow d
  start bot say "Now"
  start bot say "2"

flow e
  start bot say "Well"

flow f
  start bot say "Well"

flow main
  activate a and b

# Processing steps log:

# --> event: StartFlowInternalEvent("main")
# start flow a -> execute 'start bot say "Flow a"' -> start flow 'user said something'
# start flow b -> execute 'start bot say "Flow b"' -> start flow 'user said "Hi"'
# Note, that these two action sequences did not create a conflict since they are in a clear sequential order
# Now we have both heads of flow a and b at the match statement for FlowFinished event of 'user said something' and 'user said "Hi"'

# --> event: UtteranceBotAction.Finished("Hi")
# Will finish both 'user said something' and 'user said "Hi"' flows
# Matching statements in flow a and b trigger simultaneously
# same statements 'await bot say "Ok"' -> no conflict
# starting flow c and d is not pattern relevant -> no conflict
# same statements 'await bot say "Now"' -> no conflict
# different statements 'await bot say "1"' and 'await bot say "1"' -> conflict
# statement in flow d wins since initial match in flow b had higher score as it was more specific
# flow c gets aborted
# flow e and f get started since flow b and c are still agreeing on the pattern
# same statements 'start bot say "Well"' -> no conflict
# 'match c' statement will fail since c failed -> flow a is aborted/failed
# 'match d' statement will match since d finished in same time processing windows -> flow b finished successfully