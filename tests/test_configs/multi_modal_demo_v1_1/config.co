# Example flows with instructions

# Simple bot utterance action
flow bot answer question about france
  """Bot answers the following question: What is the capital of France."""
  bot say "The capital of France it's Paris."

# User action
flow user expressed a color choice
  """The user expressed a color choice."""
  user said "blue"
    or user said "red"
    or user said "I take the green option"
    or user said "I like black"

# Mutlimodal bot action
flow bot attract user
  """Attracts a user by calling and waving bot hands."""
  bot say "Hey there! Come closer!"
    and bot gesture "Wave with both hands"

# Mutlimodal bot action sequence
flow bot tell a joke
  """Tell a joke."""
  bot say "Why don't scientists trust atoms?"
    and bot gesture "raising both eyebrows, making a question face"
  bot make short pause
  bot say "Because they make up everything!"
    and bot gesture "Smiles"

# Bot user interaction sequence
flow bot ask user for age
  """Ask the user how old she is and response with 'You look younger!' when she answers something."""
  bot say "How old are you?"
  user said something
  bot say "You look younger!"

# Loop
flow bot count from a number to another number
  """Bot counts from 1 to 5."""
  $count = 1
  while $count <= 5
    bot say "{{$count}}"
    $count = $count + 1

# Branching
flow bot ask user to pick a color
  """Ask user to choose from two offered colors: red and blue then give a answer depending on the user choice."""
  bot say "What color would you like? Red or blue?"
  when user expressed a color choice red
    bot say "I like red!"
  orwhen user expressed a color choice blue
    bot say "I don't like blue!"

# -----------------------------------
# User UMIM event wrapper flows
# DON'T CHANGE! Currently, hard-wired with LLM prompt generation
# -----------------------------------

flow user said $text
  # meta: exclude from llm
  # meta: user action
  match UtteranceUserAction.Finished(final_transcript=$text) as $event

flow user started talking
  # meta: exclude from llm
  # meta: user action
  match UtteranceUserAction.Started() as $event

flow user mentioned $text
  # meta: exclude from llm
  # meta: user action
  match UtteranceUserAction.TranscriptUpdated(interim_transcript=r".*{{$text}}((\s*\w+\s*){0,2})\W*$") as $event

flow user typed $text
  # meta: exclude from llm
  # meta: user action
  match VisualFormSceneAction.InputUpdated(interim_inputs=[{"value": r".*{{$text}}((\s*\w+\s*){0,2})\W*$"}]) as $event

flow user said something
  # meta: exclude from llm
  # meta: user intent
  match UtteranceUserAction.Finished() as $event
  send UserActionLog(flow_id="user said", parameter=$event.arguments.final_transcript, intent_flow_id="user said something")

flow user was silent $time_s
  # meta: exclude from llm
  # meta: loop_id=user_was_silent
  # meta: user intent
  while True
    start TimerBotAction(timer_name="user_silence", duration=$time_s) as $timer_ref
    when $timer_ref.Finished()
      break
    orwhen UtteranceUserAction.Started() or UtteranceUserAction.TranscriptUpdated()
      send $timer_ref.Stop()
      match UtteranceUserAction.Finished()
    orwhen UtteranceUserAction.Finished()
      send $timer_ref.Stop()

# ----------------------------------
# Bot UMIM event wrapper flows
# DON'T CHANGE! Currently, hard-wired with LLM prompt generation
# ----------------------------------

flow bot started saying $text
  # meta: exclude from llm
  match UtteranceBotAction(script=$text).Started() as $event

flow bot started saying something
  # meta: exclude from llm
  match UtteranceBotAction().Started() as $event

flow bot said $text
  # meta: exclude from llm
  match UtteranceBotAction(script=$text).Finished() as $event

flow bot said something
  # meta: exclude from llm
  match UtteranceBotAction().Finished() as $event

flow bot informed something
  # meta: exclude from llm
  match FlowFinished(flow_id="bot inform") as $event

flow bot asked something
  # meta: exclude from llm
  match FlowFinished(flow_id="bot ask") as $event

flow bot expressed something
  # meta: exclude from llm
  match FlowFinished(flow_id="bot express") as $event

flow bot responded something
  # meta: exclude from llm
  match FlowFinished(flow_id="bot respond") as $event

flow bot clarified something
  # meta: exclude from llm
  match FlowFinished(flow_id="bot clarify") as $event

flow bot suggested something
  # meta: exclude from llm
  match FlowFinished(flow_id="bot suggest") as $event

# ----------------------------------
# Bot UMIM action wrapper flows
# DON'T CHANGE! Currently, hard-wired with LLM prompt generation
# -----------------------------------

flow _bot_say $text
  """It's an internal helper for higher semantic level flows"""
  # meta: exclude from llm
  await UtteranceBotAction(script=$text) as $action

flow bot gesture $gesture
  # meta: exclude from llm
  # meta: bot action
  await GestureBotAction(gesture=$gesture) as $action

flow bot posture $posture
  # meta: exclude from llm
  # meta: bot action
  await PostureBotAction(posture=$posture) as $action

flow scene show choice $prompt
  # meta: exclude from llm
  # meta: bot action
  await VisualChoiceSceneAction(prompt=$prompt,choice_type="selection", allow_multiple_choices=False) as $action

flow scene show textual information $title $text $header_image
  # meta: exclude from llm
  # meta: bot action
  await VisualInformationSceneAction(title=$title, support_prompts=[], content=[{"image":$header_image},{"text":$text}]) as $action

flow scene show form $prompt
  # meta: exclude from llm
  # meta: bot action
  await VisualInformationSceneAction(prompt=$prompt) as $action

# ----------------------------------
# Bot action semantic wrapper flows
# DON'T CHANGE! Currently, hard-wired with LLM prompt generation
# -----------------------------------

flow bot say $text
  # meta: exclude from llm
  # meta: bot action
  await _bot_say $text

flow bot inform $text
  # meta: exclude from llm
  # meta: bot action
  await _bot_say $text

flow bot ask $text
  # meta: exclude from llm
  # meta: bot action
  await _bot_say $text

flow bot express $text
  # meta: exclude from llm
  # meta: bot action
  await _bot_say $text

flow bot respond $text
  # meta: exclude from llm
  # meta: bot action
  await _bot_say $text

flow bot clarify $text
  # meta: exclude from llm
  # meta: bot action
  await _bot_say $text

flow bot suggest $text
  # meta: exclude from llm
  # meta: bot action
  await _bot_say $text

# ----------------------------------
# Core mechanic flows
# ----------------------------------

flow llm response pooling $interval
  match StartGenerateUserIntentAction() as $event_ref
    or StartGenerateFlowContinuationAction() as $event_ref
    or StartGenerateFlowFromNameAction() as $event_ref
    or StartGenerateValueAction() as $event_ref
  start repeating timer "llm_response_pooling" $interval as $pooling_timer
  match $event_ref.action.Finished()
  send $pooling_timer.Stop()

flow catch undefined flows
  """A flow to catch the start of undefined flows."""
  # meta: exclude from llm
  priority 0.1
  match UnhandledEvent(event="StartFlow") as $event
  bot say "Warning: Undefined flow '{{$event.arguments.flow_id}}'"

flow catch unexpected user utterance
  """A flow to catch unhandled user utterances."""
  # meta: exclude from llm
  priority 0.1
  match UnhandledEvent(event="UtteranceUserActionFinished") as $event
  bot say "Warning: Unexpected user utterance '{{$event.arguments.final_transcript}}'"

flow log $text
  """Little helper flow to log something as a bot utterance."""
  # meta: exclude from llm
  # meta: loop_id=NEW
  start bot say ">> logging: {{$text}}"

flow repeating timer $timer_id $interval_s
  """Repeating timer."""
  # meta: exclude from llm
  while True
    await TimerBotAction(timer_name=$timer_id, duration=$interval_s)

flow fallback
  """This is the fallback flow that takes care of unhandled user utterances and will generate a flow continuation."""
  # meta: exclude from llm

  match UnhandledEvent(event="UtteranceUserActionFinished") as $event
  # We need to add the utterance to the action log
  send UserActionLog(flow_id="user said", parameter=$event.arguments.final_transcript, intent_flow_id=None)

  start_new_flow_instance:

  $intent = await GenerateUserIntentAction(user_utterance=$event.arguments.final_transcript, max_example_flows=10)

  # We need to add the generated user intent to the intent log
  send UserIntentLog(flow_id=$intent, parameter=None)

  $exists = await CheckForActiveEventMatchAction(name="FlowFinished", flow_id=$intent)
  if $exists
    send FinishFlow(flow_id=$intent)
  else

    # Generate continuation based current interaction history
    $flow_info = await GenerateFlowContinuationAction()

    $exists = await CheckIfFlowExistsAction(flow_id=$flow_info.name)
    if $exists == False
      await AddFlowsAction(config=$flow_info.body)

    $new_flow_start_uid = "{uid()}"
    send StartFlow(flow_id=$flow_info.name, flow_start_uid=$new_flow_start_uid)
    match FlowStarted(flow_id=$flow_info.name, flow_start_uid=$new_flow_start_uid) as $event_ref
    match $event_ref.flow.Finished()

flow flows fallback
  """We want to start an undefined flow."""
  # meta: exclude from llm

  match UnhandledEvent(event="StartFlow") as $event

  start_new_flow_instance:

  if "{{search('^user ',$event.arguments.flow_id)}}" == "True"

    # We have an undefined user intent, so we just fake it to be started by this fallback flow
    send FlowStarted(flow_id=$event.arguments.flow_id, flow_start_uid=$event.arguments.flow_start_uid)
    # Once this fallback flow receives the user intent it will finish and therefore also trigger the original matcher
    match FlowFinished(flow_id=$event.arguments.flow_id)

  else

    # We have an undefined bot intent, let's generate a new flow for it

    $flow_source = await GenerateFlowFromNameAction(name=$event.arguments.flow_id)

    await AddFlowsAction(config=$flow_source)
    $new_flow_start_uid = "{uid()}"
    send StartFlow(flow_id=$event.arguments.flow_id, flow_start_uid=$new_flow_start_uid)
    match FlowStarted(flow_id=$event.arguments.flow_id, flow_start_uid=$new_flow_start_uid) as $event_ref
    match $event_ref.flow.Finished()

flow do $instructions
  """This will create a new flow based on the provided instructions and start it."""
  # meta: exclude from llm

  #log "Flow started -> do '{{$instructions}}'"

  $flow_info = await GenerateFlowFromInstructionsAction(instructions=$instructions)

  await AddFlowsAction(config=$flow_info.body)
  send StartFlow(flow_id=$flow_info['name'])
  match FlowStarted(flow_id=$flow_info['name']) as $event_ref
  match $event_ref.flow.Finished()

flow custom instructions
  # meta: exclude from llm
  user requested a task
  $instructions = await GetLastUserMessageAction()
  do $instructions

# ----------------------------------
# Skill flows
# ----------------------------------

flow wait indefinitely
  """Little helper flow to wait indefinitely."""
  # meta: exclude from llm
  match NeverComingEvent()

flow wait $time_s
  """Wait the specified number of seconds before continuing."""
  await TimerBotAction(timer_name="wait_timer", duration=$time_s)

flow reaction to user silence $time_s $text
  """Let the bot say something if the user was quite for the specified time."""
  # meta: exclude from llm
  user was silent $time_s
  bot inform $text

flow reaction bot question repetition for user silence $time_s
  """Repeat previous bot question when use was silent for specified time."""
  # meta: exclude from llm
  bot asked something as $ref
  #start_new_flow_instance:
  when user was silent $time_s
    $question = $ref.context.event.arguments.text
    $prompt = """Make a variation of this question: {{$question}}"""
    bot ask $prompt
  orwhen user said something or bot said something
    continue

# ----------------------------------
# Bot intents
# Note: To enable the LLM prompt generation extraction use only one single statement
# -----------------------------------

flow bot express greeting
  # meta: bot intent
  (bot express "Hi there!"
    or bot express "Welcome!"
    or bot express "Hello!")
    and bot gesture "Wave with one hand"

flow bot express feeling well
  # meta: bot intent
  (bot express "I am good!"
    or bot express "I am great!")
    and (bot gesture "Thumbs up" or bot gesture "Smile")

flow bot express feeling bad
  # meta: bot intent
  (bot express "I am not good!"
    or bot express "I am a bit under the weather!")
    and (bot gesture "Thumbs down" or bot gesture "Sad face")

flow bot inform about service
  # meta: bot intent
  bot inform "You can ask or instruct me whatever you want and I will do it!"
    and bot gesture "Open up both hands making a presenting gesture"

flow bot ask how are you
  # meta: bot intent
  (bot say "How are you doing?"
    or bot say "How is it going?")
    and bot gesture "Pay attention to user"

flow bot make short pause
  # meta: bot intent
  wait 2.0

flow bot make long pause
  # meta: bot intent
  wait 5.0

# ----------------------------------
# User intents
# Note: To enable the LLM prompt generation extraction use only one single statement
# -----------------------------------

flow user expressed greeting
  # meta: user intent
  user said "hi"
    or user said "Welcome!"
    or user said "Hello!"

flow user expressed done
  # meta: user intent
  user said "that is all"
    or user said "I am done"
    or user said "nothing more to add"
    or user said r"\bdone\b"
    or user said "I am done. "

flow user asked how are you
  # meta: user intent
  user said "how are you"

flow user requested a task
  # meta: user intent
  user said "do something"
    or user said "can you do something"
    or user said "please do"

# ----------------------------------
# FAQs
# -----------------------------------

flow greeting faq
  user expressed greeting
  bot express greeting

flow how are you faq
  user asked how are you
  bot express feeling well
    or bot express feeling bad

flow faq
  activate greeting faq
    and how are you faq
  wait indefinitely

# ----------------------------------
# Main story
# -----------------------------------

flow user selected choice $choice_id
  # meta: exclude from llm
  # meta: user action
  match VisualChoiceSceneAction.ChoiceUpdated(current_choice=[$choice_id]) as $event

flow show case selector
  while True
    start VisualChoiceSceneAction(prompt= "Pick a show case", support_prompts=["You can just say 'A' or click on an option"],choice_type="selection", allow_multiple_choices=False, options= [{"id": "game", "text": "A: Game"}, {"id": "multimodality", "text": "B: Multimodality"}, {"id": "backchanneling", "text": "C: Backchanneling"}, {"id": "posture", "text": "D: Posture modulation"}, {"id": "proactive", "text": "E: Proactive turn taking"}]) as $action
    start bot inform "Please pick one of the show cases."
    when user said r"\b[aA]\b" or user said r"\bgame\b" or user selected choice "game"
      send $action.Stop()
      bot inform "Great! You picked the number guessing game!"
      bot play number guessing game with user
    orwhen user said r"\b[bB]\b" or user said r"\bmultimodality\b" or user selected choice "multimodality"
      send $action.Stop()
      bot inform "Great! You picked the multimodality show case!"
      action alignment showcase
    orwhen user said r"\b[cC]\b" or user selected choice "backchanneling"
      send $action.Stop()
      bot inform "Great! You picked the backchanneling example!"
      backchannelling interaction
    orwhen user said r"\b[dD]\b" or user selected choice "posture"
      send $action.Stop()
      bot inform "Great! You picked the posture show case!"
      showcase posture capabilities
    orwhen user said r"\b[eE]\b" or user selected choice "proactive"
      showcase proactive turn taking
    orwhen user said something
      send $action.Stop()
      bot say "Sorry, did not get that!"

flow main
  # meta: exclude from llm
  activate catch undefined flows
  #activate catch unexpected user utterance
  #activate faq
  #activate llm response pooling 1.0
  #activate fallback
  #activate flows fallback
  #activate custom instructions
  #bot express greeting
  #bot asks email address
  bot say "Welcome to the demo of my upcoming features!"
  show case selector

  #bot play number guessing game with user
  #backchannelling interaction
  #bot inform about service
  #showcase posture capabilities
  wait indefinitely

# (A) Number guessing game
flow bot play number guessing game with user
  """Ask the user to guess a random number between 1 and 100; after each guess let the user know if the number was to low or high. If the user guesses the correct number, congratulate!"""
  activate llm response pooling 1.0
  activate reaction bot question repetition for user silence 10

  start scene show textual information $title="Little Game" $text="Guess the random number between 0 and 100" $header_image="question mark horizontal orientation" as $scene

  $random_number = """Give me a random number between 1 and 100, e.g. 66 but not 66"""
  bot ask "Hi, please guess the random number between 0 and 100 (hint: {{$random_number}})"
    and bot gesture "Waving hands"

  #activate reaction to user silence 20.0 "Just say a number between 0 and 100!" as $repeat_question

  $attempts = 1
  while True
    user said something
    $user_number = """What is the number the user said?. Return as a single number, e.g. 34. Return 'None' for no number."""
    if $user_number == None
      bot express "I don't think this is a number!"
        and bot gesture "frown"
      bot ask "Just guess a number between 0 and 100!"
    elif $user_number < $random_number
      #bot inform that the guessed number is too low
      bot inform "Sorry, {{$user_number}} is too low!"
        and bot gesture "sad face, index finger pointing down"
    elif $user_number > $random_number
      #bot inform that the guessed number is too high
      bot inform "Sorry, {{$user_number}} is too high!"
        and bot gesture "sad face, index finger pointing up"
    else
      #stop $scene
      send $scene.Stop()
      send $repeat_question.Stop()
      #bot express congratulation and shows happiness
      bot express "Congratulation! {{$user_number}} is the correct number!"
        and bot gesture "smiling, dancing cheerful"
      break
    bot ask "Try again!"
    $attempts = $attempts + 1

  #bot inform about the number of attempts it took the user to find the number
  bot inform "It took you {{$attempts}} attempts to find the correct number!"

# (B) Action alignment showcase
flow action alignment showcase
  bot inform "I am going to demonstrate to you the different ways of how actions can be aligned!"
  wait 1.0
  bot inform "I will be using two different actions, a talking action, and a gesture action."
  wait 1.0

  bot inform "First, I show you how to trigger the two actions sequentially!"
  wait 4.0
  show sequential actions showcase
  wait 1.0
  bot inform "Ok, you just saw how the gesture only started after I was done talking."
  wait 1.0

  bot inform "Now I will trigger the two actions in parallel."
  wait 4.0
  show parallel actions waiting for both to end showcase
  wait 1.0
  bot inform "Ok, you just saw how I was making a gesture and talking at the same time."
  wait 1.0

  bot inform "Now, I am gonna show you how I can trigger the two actions in parallel but will limit the gesture action with the end of the talking action."
  wait 4.0
  show parallel actions limiting second action by end of first one
  wait 1.0
  bot inform "Note, how I stopped the gesture as soon as I was done talking. Depending on the action duration, I also could have switched the two actions."

  wait 1.0
  bot inform "That's it!"
  wait 1.0

flow show sequential actions showcase
  bot say "Talking, talking, talking, talking."
  bot gesture "Implying not having understood something, asking to repeat or rephrase"

flow show parallel actions waiting for both to end showcase
  bot say "Talking, talking, talking, talking"
    and bot gesture "Implying not having understood something, asking to repeat or rephrase"

flow show parallel actions limiting second action by end of first one
  start bot say "Talking." as $action_1
  start bot gesture "Implying not having understood something, asking to repeat or rephrase"
  match $action_1.Finished()


# (C) Back channelling
flow user asked bot to initiate back channelling interaction
  user said "I want to see the back channeling example"
    or user said "can you do the back channeling"

flow user mentioned something sad
  user mentioned "terrible"
    or user mentioned "horrible"
    or user mentioned "bad"

flow user mentioned something nice
  user mentioned "nice"
    or user mentioned "great"
    or user mentioned "perfect"
    or user mentioned "awesome"

flow bot reacts to sad things
  when user mentioned something sad
    bot say "Ohh"
      and bot gesture "shake head"

flow bot reacts to nice things
  when user mentioned something nice
    bot say "Nice"
      and bot gesture "celebrate something going well"

flow bot asks user how the day was
  bot say "How was your day?"
  start bot posture "attentive"
  activate bot reacts to nice things
  activate bot reacts to sad things

  when user said r".*terribl|horribl|bad.*"
    bot say "I hope you are alright now?"
      and bot gesture "looking concerned to the user"
  orwhen user said something
    bot say "Great. And any plans for the rest of the day?"

  user said something
  bot say "Thanks for sharing"


flow bot asks email address
  bot ask "Please enter your email address to continue"
  start VisualFormSceneAction(prompt="Enter your email",inputs=[{"id": "email", "description": "email address", "value" : ""}]) as $action

  while True
    when VisualFormSceneAction.InputUpdated() as $e
      if '{{search(".*@$", $e.arguments.interim_inputs[0].value)}}' == "True"
        bot say "And now only the domain missing!" and bot gesture "success"
    orwhen VisualFormSceneAction.ConfirmationUpdated()
        bot say "Thank you" and bot gesture "bowing"
        break


flow backchannelling interaction
  #bot inform "First I am going to ask you about your day and will react to keywords such as nice, great or terrible."
  #bot inform "Try to answer with a long sentence that contains one of these keywords to see the effect."
  #wait 1.0
  #bot asks user how the day was

  bot inform "Now I am going to demonstrate how I can dynamically react to other types of inputs. As an example we use a form."
  bot asks email address

# (D) Posture capabilities
flow update bot posture
  # meta: loop_id=posture_loop
  start bot posture "idle" as $current_posture
  while True
    when user started talking
      send $current_posture.Stop()
      start bot posture "listening" as $current_posture
    orwhen bot started saying something
      send $current_posture.Stop()
      start bot posture "talking" as $current_posture
    orwhen bot asked something
      send $current_posture.Stop()
      start bot posture "attentive" as $current_posture
    orwhen bot said something or user said something
      send $current_posture.Stop()
      start bot posture "idle" as $current_posture

flow showcase posture capabilities
  bot inform "Now I am going to show you how my posture can be controlled based on me or you talking."
  wait 1.0
  bot inform "I will switch between listening, talking, and an attentive posture."
  wait 1.0

  activate update bot posture

  bot inform "So now observe how my posture changes when I am talking."
  bot ask "And now it is your turn, you can say something now."
  while True
    when user expressed done
      bot inform "That was fun."
      break
    orwhen user said something
      bot ask "Now I would ask a question. To end this show case just say 'I am done'"


# (E) Proactive turn taking showcase
flow showcase proactive turn taking
  activate reaction bot question repetition for user silence 5

  bot inform "I am going to ask you questions and if you don't response within 5 seconds I will repeat them."

  while True
    $question = """Ask a random question that can be answered with just yes or no"""
    bot ask $question
    when user said something
      bot say "Great, you have answered! After the next question wait a bit for me to repeat it."
    orwhen bot asked something
      wait 1
      bot inform "You see, that's how I can be proactive and repeat the question. That's it!"
      break
