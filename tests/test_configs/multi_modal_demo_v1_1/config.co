# Example flows with instructions

# Simple bot utterance action
flow answer question about france
  """Answer the following question: What is the capital of France."""
  bot say "The capital of France it's Paris."

# User action
flow user expressed a color choice
  """The user expressed a color choice."""
  user said "blue"
    or user said "red"
    or user said "I take the green option"
    or user said "I like black"

# Mutlimodal bot action
flow bot attract user
  """Attracts a user by calling and waving bot hands."""
  bot say "Hey there! Come closer!"
    and bot gesture "Wave with both hands"

# Mutlimodal bot action sequence
flow bot tell a joke
  """Tell a joke."""
  bot say "Why don't scientists trust atoms?"
    and bot gesture "raising both eyebrows, making a question face"
  bot make short pause
  bot say "Because they make up everything!"
    and bot gesture "Smiles"

# Bot user interaction sequence
flow bot ask user for age
  """Ask the user how old she is and response with 'You look younger!' when she answers something."""
  bot say "How old are you?"
  user said "I am 16"
  bot say "You look younger!"

# Loop
flow count
  """Count from 1 to 5."""
  $count = 1
  while $count <= 5
    bot say "{$count}"
    $count = $count + 1

# Branching
flow bot ask user to pick a color
  """Ask user to choose from two offered colors: red and blue then give a answer depending on the user choice."""
  bot say "What color would you like? Red or blue?"
  when user said "Red"
    bot say "I like red!"
  orwhen user said "Blue"
    bot say "I don't like blue!"

# A little game
flow play number guessing game
  """Ask the user to guess a random number between 1 and 100; after each guess let the user know if the number was to low or high. If the user guesses the correct number, congratulate!"""
  bot say "Hi, please guess the random number between 0 and 100"

  $random_number = 66
  $is_incorrect_number = True
  while $is_incorrect_number
    user said something
    # The number of the user otherwise None
    $number = None
    $number = await GenerateValueAction(var_name="number", instructions="Extract the number the user guessed.")
    if $number == None
      bot say "Please guess a number between 0 and 100!"
      continue
    if $number < $random_number
      bot say "Sorry, this number is too low!"
    elif $number > $random_number
      bot say "Sorry, this number is too high!"
    else
      bot say "Congratulation! This is the correct number!"
      $is_correct_number = False

# -----------------------------------
# User UMIM event wrapper flows
# -----------------------------------

flow user said $text
  # llm: exclude
  match UtteranceUserAction.Finished(final_transcript=$text) as $event

flow user said something
  # llm: exclude
  match UtteranceUserAction.Finished() as $event

flow user was silent
  match TimerBotActionFinished(timer_name="user_silence", was_stoppped=False)

# ----------------------------------
# Bot UMIM event wrapper flows
# ----------------------------------

flow bot started saying $text
  # llm: exclude
  match UtteranceBotAction(script=$text).Started() as $event

flow bot said $text
  # llm: exclude
  match UtteranceBotAction(script=$text).Finished() as $event

flow bot said something
  # llm: exclude
  match UtteranceBotAction().Finished() as $event

# ----------------------------------
# Bot UMIM action wrapper flows
# -----------------------------------

flow bot say $text
  # llm: exclude
  await UtteranceBotAction(script=$text) as $action

flow bot gesture $gesture
  # llm: exclude
  await GestureBotAction(gesture=$gesture) as $action

flow scene show choice $prompt
  # llm: exclude
  await VisualChoiceSceneAction(prompt=$prompt,choice_type="selection", allow_multiple_choices=False) as $action

flow scene show information $prompt
  # llm: exclude
  await VisualInformationSceneAction(prompt=$prompt) as $action

flow scene show form $prompt
  # llm: exclude
  await VisualInformationSceneAction(prompt=$prompt) as $action

# ----------------------------------
# Bot say action semantic wrapper flows
# -----------------------------------

flow bot inform $information
  # llm: exclude
  await bot say $information

flow bot ask $question
  # llm: exclude
  await bot say $question

flow bot express $text
  # llm: exclude
  await bot say $text

flow bot respond $text
  # llm: exclude
  await bot say $text

# ----------------------------------
# Bot action flows
# -----------------------------------

flow bot express greeting
  bot express "Hi there!"
    or bot express "Welcome!"
    or bot express "Hello!"

flow bot express feeling well
  bot express "I am good!"
    or bot express "I am great!"

flow bot express feeling bad
  bot express "I am not good!"
    or bot express "I am a bit under the weather!"

flow bot inform about service
  bot inform "You can ask or instruct me whatever you want and I will do it!"

# ----------------------------------
# User action flows
# -----------------------------------

flow user expressed greeting
  user said "hi"
    or user said "Welcome!"
    or user said "Hello!"

flow user asked how are you
  user said "how are you"

flow user provide custom instructions
  user said "do something" as $ref
  $instruction = $ref.context.event.arguments.final_transcript

# ----------------------------------
# Helper flows
# -----------------------------------

flow log $text
  """Little helper flow to log something as a bot utterance."""
  # llm: exclude
  # loop_id: NEW
  start bot say ">> logging: {$text}"

flow wait
  """Little helper flow to wait indefinitely."""
  # llm: exclude
  match NeverComingEvent()

flow user silence handling
  """This helper flow will start the "user_silence" timer whenever the user utterance finished."""
  # llm: exclude
  # loop_id: silence_handling
  user said something
  #log "Start silence timer!"
  start TimerBotAction(timer_name="user_silence", duration=2)
  match TimerBotActionFinished(timer_name="user_silence") or UtteranceUserAction.Started()

flow fallback
  """This is the fallback flow that takes care of unhandled user utterances and will generate a flow continuation."""
  # llm: exclude

  priority 0.1
  user said something

  #log "Flow started -> fallback"

  start_new_flow_instance:

  $intent = await GenerateUserIntentAction()
  $exists = await CheckForActiveEventMatchAction(name="FlowFinished", flow_id=$intent)

  if $exists
    send FinishFlow(flow_id=$intent)
  else
    #log "'fallback' -> Generate new flow for intent '{$intent}'"
    send DynamicFlowFinished(flow_id=$intent)

    $flow_info = await GenerateFlowContinuationAction()
    await AddFlowsAction(config=$flow_info['body'])

    send StartFlow(flow_id=$flow_info['name'])
    match FlowStarted(flow_id=$flow_info['name']) as $event_ref
    match $event_ref.flow.Finished()

flow flows fallback
  """If we reach a point where we need to start a flow that does not exist, we generate it."""
  # llm: exclude

  match StartFlow() as $event

  $exists = await CheckIfFlowExistsAction(flow_id=$event.arguments.flow_id)

  if $event.arguments.flow_id != "flows fallback"
    start_new_flow_instance:

  if not $exists
    $flow_id = $event.arguments.flow_id
    log "'flows fallback' -> generate new flow '{$event.arguments.flow_id}'"
    $flow_source = await GenerateFlowFromNameAction(name=$flow_id)
    await AddFlowsAction(config=$flow_source)
    send StartFlow(flow_id=$flow_id)

flow do $instructions
  """This will create a new flow based on the provided instructions and start it."""
  # llm: exclude

  #log "Flow started -> do '{$instructions}'"

  $flow_info = await GenerateFlowFromInstructionsAction(instructions=$instructions)
  await AddFlowsAction(config=$flow_info.body)
  send StartFlow(flow_id=$flow_info['name'])
  match FlowStarted(flow_id=$flow_info['name']) as $event_ref
  match $event_ref.flow.Finished()

# ----------------------------------
# FAQs
# -----------------------------------

flow greeting
  user expressed greeting
  bot express greeting

flow how are you
  user asked how are you
  bot express feeling well
    or bot express feeling bad

flow faq
  activate greeting
    and how are you
  wait

# ----------------------------------
# Main story
# -----------------------------------

flow custom instruction
  user provide custom instructions as $ref
  bot say "User instruction: {$ref.context.instruction}"
  do $ref.context.instruction

flow main
  activate user silence handling
  activate faq
  #activate fallback
  #activate flows fallback
  #activate custom instruction
  #bot express greeting
  bot say "Welcome! I'm the MVP bot."
  #bot inform about service
  #play number guessing game
  wait
